{
  "name": "expressworks",
  "version": "3.3.0",
  "description": "Express.js workshop based on workshopper and inspired by stream-adventure by @substack and @maxogden.",
  "main": "expressworks.js",
  "author": {
    "name": "Azat Mardan",
    "url": "@azat_co"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/azat-co/expressworks"
  },
  "keywords": [
    "express.js",
    "node.js",
    "javascript",
    "nodeschool.io"
  ],
  "license": "BSD-2-Clause",
  "bugs": {
    "url": "https://github.com/azat-co/expressworks/issues"
  },
  "bin": {
    "expressworks": "./expressworks.js"
  },
  "preferGlobal": true,
  "dependencies": {
    "body-parser": "^1.12.0",
    "express": "^4.11.2",
    "jade": "^1.9.2",
    "stylus": "^0.50.0",
    "superagent": "~0.15.7",
    "through2": "^0.6.3",
    "workshopper": "^2.6.0",
    "workshopper-exercise": "^2.5.3"
  },
  "readme": "expressworks\n============\n\n**Video screencasts** which walk your through setup and problems (spoiler alert): [YouTube ExpressWorks](https://www.youtube.com/watch?v=C2IqQOLCCoU&list=PLguYmmjtxbWGwQRxXqMTQCj6FNb55aFVo). üì∫üíªüòÅ\n\nLearn Express.js from the author of one of the best books on Express.js‚Äî[Pro Express.js](http://proexpressjs.com)‚Äîworkshop to teach you basics of Express.js.\n\nThis workshop is based on [workshopper](https://github.com/rvagg/workshopper) and inspired by [stream-adventure](https://github.com/substack/stream-adventure) by [@substack](https://twitter.com/substack) and [@maxogden](https://twitter.com/maxogden).\n\nExpressWorks will provide you with tasks and hints. You write the solutions to these problems. Then, after you wrote a solution as an Express.js app, ExpressWorks will verify your solution to the problem.\n\n![Hello World Express.js app](https://raw.github.com/azat-co/expressworks/master/images/screen.png)\n\n\n[![](https://raw.github.com/azat-co/expressworks/master/images/cover.jpg)](http://proexpressjs.com)\n\n\n\nThis workshop is brought to you by the author of [Pro Express.js](http://proexpressjs.com) (Apress 2014) [Azat Mardan](http://azat.co).\n\n## Cheatsheet\n\nYou might want to download [the free Express.js cheatsheet](https://gumroad.com/l/NQiQ/git-874E6FB4) before embarking on a journey, or [view it online](https://gumroad.com/l/NQiQ/git-874E6FB4).\n\n\n\n## Languages\n\n* English\n* French\n* Traditional Chinese\n* Korean\n* Japanese\n\n## Contributors\n\n\n```\n95  Azat Mardan\n19  Christophe Porteneuve\n10  Tyler Moeller\n 8  Justin Porter\n 6  billy3321\n 3  Harry Moreno\n 3  Charlotte Spencer\n 3  Kohei TAKATA\n 2  Julian Mazzitelli\n 2  Robbie Holmes\n 2  Shim Won\n 2  Thomas Burette\n 2  Austin Corso\n 2  azat-co\n 2  Kevin Jayanthan\n 2  intrueder\n 1  Timothy Gu\n 1  Trevor Whitney\n 1  Wojciech Gawronski\n 1  brownman\n 1  raj\n 1  Alessandro Lensi\n 1  swisherb\n 1  Alfredo Miranda\n 1  Ayman Mahfouz\n 1  Daniel Geier\n 1  Dylan Smith\n 1  Eddie Hsieh\n 1  Finn\n 1  Gabe Fernando\n 1  Giuseppe\n 1  Jessie Shi\n 1  Johan Binard\n 1  Jonny Arnold\n 1  Kevin Kuhl\n 1  Louis Pilfold\n 1  Rich Trott\n 1  Richard Kho\n 1  Ryan Kois\n```\n\nMake a PR to see your name here. ;-)\n\nPS: via `$ git shortlog -n -s`. Please add yourself to the list when making a pull request.\n\n## Installation (Recommended)\n\nRecommended global installation:\n\n```bash\n$ npm install -g expressworks\n$ expressworks\n```\n\nIf you see errors, try:\n\n```bash\n$ sudo npm install -g expressworks\n$ expressworks\n```\n\n## Local Installation (Advanced)\n\nRun & install locally:\n\n```bash\n$ mkdir node_modules\n$ npm install expressworks\n$ cd node_modules/expressworks\n$ node expressworks\n```\n\nOptional step that gives your the global command (`expressworks`) in the Terminal/command prompt:\n\n```\n$ npm link\n$ expressworks\n```\n\n# Usage\n\n```\n$ expressworks\n```\n\n*Note*: ExpressWorks depends on a local copy of Express being available in your project folder.  To do the exercises, make sure to install the Express.js with\n\n```\n$ npm init\n$ npm install express@4.11.2\n```\n\nSee Offline Setup for more required dependencies.\n\nExpressWorks understands these commands:\n\n```\nUsage\n\n  expressworks\n    Show a menu to interactively select a workshop.\n  expressworks list\n    Show a newline-separated list of all the workshops.\n  expressworks select NAME\n    Select a workshop.\n  expressworks current\n    Show the currently selected workshop.\n  expressworks run program.js\n    Run your program against the selected input.\n  expressworks verify program.js\n    Verify your program against the expected output.\n```\n\n# Offline Setup\n\nIf you would like to setup all node packages beforehand, you can complete this workshop offline. Here are all the modules to install with exact versions that this workshop supports:\n\n```bash\n$ npm install express@4.11.2\n$ npm install jade@1.9.2\n$ npm install body-parser@1.12.0\n$ npm install stylus@0.50.0\n```\n\nNote: You need to have `node_modules` or `packagen.json` in your project folder before installing dependencies. Run `$ mkdir node_modules` or `$ npm init` to create one of them.\n\n\n# Reset\n\nIf you want to reset the list of completed tasks, clean the `~/.config/expressworks/completed.json` file.\n\n![Hello World Express.js app](https://raw.github.com/azat-co/expressworks/master/images/finished.png)\n\n# More Information\n\nCheck out [Express.js Guide](http://expressjsguide.com), [Pro Express.js](http://proexpressjs.com) and [FREE Express.js cheatsheet](https://gumroad.com/l/NQiQ/git-874E6FB4).\n\n# Steps\n\n\n## Hello World\n\nCreate an Express.js app that runs on localhost:3000, and outputs \"Hello World!\" when somebody goes to root '/home'.\n\n`process.argv[2]` will be provided by expressworks to you, this is the port number.\n\n## Jade\n\nCreate an Express.js app with a home page (/home) rendered by jade template engine, that shows current date (toDateString).\n\n\n## Good Old Form\n\nWrite a route ('/form') that processes HTML form input (<form><imput name=\"str\"/></form>) and prints backwards the str value.\n\n## Static\n\nApply static middleware to server index.html file without any routes. The index.html file is provided and usable via `process.argv[3]` value of the path to it. However, you can use your own file with this content:\n\n```html\n  <html>\n    <head>\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"/main.css\"/>\n    </head>\n    <body>\n      <p>I am red!</p>\n    </body>\n  </html>\n```\n\n## Stylish CSS\n\nStyle your HTML from previous example with some Stylus middleware. The path to main.styl file is provided in `process.argv[3]` or you can create your own file/folder from these:\n\n```css\n  p\n    color red\n```\n\nThe index.html file:\n\n```html\n  <html>\n    <head>\n      <title>expressworks</title>\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"/main.css\"/>\n    </head>\n    <body>\n      <p>I am red!</p>\n    </body>\n  </html>\n```\n\n## Param Pam Pam\n\nCreate an Express.js server that processes PUT `/message/:id` requests, e.g., PUT `/message/526aa677a8ceb64569c9d4fb`.\n\nAs the response of this request return id SHA1 hashed with a date:\n\n```javascript\n  require('crypto')\n    .createHash('sha1')\n    .update(new Date().toDateString().toString() + id)\n    .digest('hex')\n```\n\n## What's in Query\n\nWrite a route that extracts data from query string in the GET `/search` URL route, e.g., `?results=recent&include_tabs=true`, and then transforms outputs it back to the user in JSON format.\n\n## JSON Me\n\nWrite a server that reads a file (file name is passed in `process.argv[3]`), parses it to JSON and outputs the content to the user with `res.json(object)`.\n",
  "readmeFilename": "README.md",
  "_id": "expressworks@3.3.0",
  "dist": {
    "shasum": "a8e4b44bdb6dc7b2e9b8b82a545a6c97650fc0cc"
  },
  "_from": "expressworks@",
  "_resolved": "http://registry.npmjs.org/expressworks/-/expressworks-3.3.0.tgz"
}
